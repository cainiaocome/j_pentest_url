#!/usr/bin/env python
# encoding: utf8

"""
url process
author: jlz
date: 2017-05-15
"""

import os
import cgi
import json
import random
import requests
import copy
import urllib
import urlparse
import traceback
import tldextract

from pprint import pprint

import urlparse

class Url(object):
    """
        this class represents a URL
        no getter function, access by attributes ( i dont like getter functions )
    """

    def __init__( self, url ):
        """
            url: unicode only, bytes not accepted
        """
        if not isinstance( url, unicode ):
            raise Exception( '<j_pentest_url.url.Url> url not unicode ' )
        self.url = url

        scheme, netloc, path, params, query, fragment = urlparse.urlparse( self.url )

        self.scheme = scheme
        self.netloc = netloc
        self.path = path
        self.params = params  # rare
        self.query = query
        self.fragment = fragment

        self.path_components = self.path.split( '/' )
        self.query_components = urlparse.parse_qsl( self.query )
        # notice: i used parse_qsl instead of parse_qs ( notice the l )
        # example of query_components:  [('wd', 'wtf'), ('wd2', ''), ('wd', 'wtf2')]

    def _key( self ): # hash key
        u = urlparse.urlparse( self.url )

        p = tuple( filter( None, u.path.split( '/' ) ) )
        if len(p)==0:
            pass
        elif len(p)==1:
            p = ( p[0][:2], )
        else:
            p = p[:-1]

        q = tuple( urlparse.parse_qs( u.query ).keys() )

        return ( u.netloc, p, q )

    
    def __hash__( self ):
        return hash( self._key() )

    def get_file_name(self):
        """
        :return: Returns the filename name for the given url.
        """
        return self.path[self.path.rfind('/') + 1:]

    def is_media( self ):
        """
            from path extract extension and guess file type based on that
        """
        media_ext = "flv,mp4,mp4,swf,jpg,jpeg,png,mp4,gif,pdf,rar,zip,avi,mp4,swf,wmi,exe,mpeg,ppt,pptx,doc,docx,xls,xlsx,apk"
        media_ext = filter( None, media_ext.split(',') )
        ext = self.get_ext()
        return ( (ext) and ( ext in media_ext ) )

    def should_sqli( self ):
        """
            from extension to determin whether should be test against sqli, static data no need to test
        """
        media_ext = "js,flv,mp4,mp4,swf,jpg,jpeg,png,mp4,gif,pdf,rar,zip,avi,mp4,swf,wmi,exe,mpeg,ppt,pptx,doc,docx,xls,xlsx,apk"
        media_ext = filter( None, media_ext.split(',') )
        ext = self.get_ext()
        return ( ext not in media_ext )

    def get_ext( self ):
        """
            get extension from url, so this is not reliable
            os.path.splitext is used to extract extension
        """
        path = urlparse.urlparse( self.url ).path
        ext = os.path.splitext(path)[1]
        return ext
