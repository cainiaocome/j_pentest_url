#!/usr/bin/env python
# encoding: utf8

"""
url process
"""

import os
import cgi
import json
import random
import requests
import copy
import urllib
import urlparse
import traceback
import tldextract

from pprint import pprint

class Url(object):

    def __init__(self, url):
        self.url = url

    def _key( self ): # hash key
        u = urlparse.urlparse( self.url )

        p = tuple( filter( None, u.path.split( '/' ) ) )
        if len(p)==0:
            pass
        elif len(p)==1:
            p = ( p[0][:2], )
        else:
            p = p[:-1]

        q = tuple( urlparse.parse_qs( u.query ).keys() )

        return ( u.netloc, p, q )

    
    def __hash__( self ):
        return hash( self._key() )

    def is_media( self ):
        """
            from path extract extension and guess file type based on that
        """
        media_ext = "flv,mp4,mp4,swf,jpg,jpeg,png,mp4,gif,pdf,rar,zip,avi,mp4,swf,wmi,exe,mpeg,ppt,pptx,doc,docx,xls,xlsx,apk"
        media_ext = filter( None, media_ext.split(',') )
        ext = self.get_ext()
        return ( (ext) and ( ext in media_ext ) )

    def should_sqli( self ):
        """
            from extension to determin whether should be test against sqli, static data no need to test
        """
        media_ext = "js,flv,mp4,mp4,swf,jpg,jpeg,png,mp4,gif,pdf,rar,zip,avi,mp4,swf,wmi,exe,mpeg,ppt,pptx,doc,docx,xls,xlsx,apk"
        media_ext = filter( None, media_ext.split(',') )
        ext = self.get_ext()
        return ( ext not in media_ext )

    def get_ext( self ):
        """
            get extension from url, so this is not reliable
            os.path.splitext is used to extract extension
        """
        path = urlparse.urlparse( self.url ).path
        ext = os.path.splitext(path)[1]
        return ext
