#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
author: jlz
date: 2017-07-01
last modify: 2017-07-01
"""

import logging
import traceback
import itertools

from anytree import Node, Resolver, RenderTree
from anytree.render import ContRoundStyle
from anytree.resolver import ChildResolverError
from anytree.dotexport import RenderTreeGraph

from .url import Url

class CrawlerUrlTree( object ):

    def __init__( self ):
        self.root = Node( 'root', parent=None )
        self.resolver = Resolver()
        self.max_children_count = 8

    def insert_node( self, path ):
        """
        """
        logging.info( 'insert_node {}'.format( path ) )
        # first, check path exists
        path_str = '/'.join( path )
        try:
            self.resolver.get( self.root, path_str )
        except ChildResolverError:
            pass
        else:
            return None
        # second, check ancestor path
        for i in range( len( path ) ):
            ancestor_path = path[:i]
            try:
                node = self.resolver.get( self.root, '/'.join( ancestor_path ) )
                if len( node.children ) > self.max_children_count:
                    return
            except ChildResolverError:
                pass
            except:
                logging.info( 'unhandled except' )
                logging.info( traceback.format_exc() )

        parent_path = path[:-1]
        parent_path_str = '/'.join( parent_path )
        parent_exists = True

        try:
            parent = self.resolver.get( self.root, parent_path_str )
        except ChildResolverError:
            parent_exists = False

        if parent_exists==False:
            self.insert_node( parent_path )

        # 虽然前面有构建父节点的过程，但是如果父节点的路径上某个地方出度已经超过我们定义的
        # 阈值，父节点的构建是可能失败的
        try:
            parent = self.resolver.get( self.root, parent_path_str )
        except ChildResolverError:
            return None

        logging.info( 'parent.children:{}'.format( len( parent.children ) ) )
        if len( parent.children ) > 8 and ( not parent.is_root ):
            return None
        else:
            new_node = Node( path[-1], parent )
            return new_node 

    def insert_url( self, url ):
        _url = url
        url = Url( url )

        path = tuple( itertools.chain( [ url.netloc, ], url.path_components ) )

        new_node = self.insert_node( path )
        if new_node:
            new_node.url = _url
            return new_node
        else:
            return None

    def render( self ):
        return RenderTree( self.root, style=ContRoundStyle() )
